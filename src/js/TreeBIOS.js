'use strict';

import InspireTree from 'inspire-tree';
import _ from 'lodash';

export default class TreeBIOS extends InspireTree {

    /**
     @class TreeBIOS
     @summary Tree BIOS, the brains of the operation
     @implements InspireTree
     @see http://www.inspire-tree.com/docs/current/InspireTree.html
     @param {Object} opts - Supplied configuration for the BIOS model.
     */
    constructor(opts) {
        if (opts === undefined) {
            opts = {};
        }
        /**
         @typedef {Object} NodeSource
         @memberOf TreeBIOS
         @see http://www.inspire-tree.com/docs/current/TreeNode.html
         @property {String} id **Base** UUID generated by InspireTree
         @property {String} text **Base** Node’s text required by InspireTree
         @property {Boolean} loadingContent To keep track of when content is loading
         @property {(NodeSource[]|Boolean)} children **Base** Node objects that are children of this node, required by InspireTree
         @property {String} tmid Our own id from our back-end
         @property {String} content The payload text of the node
         */

        /**
         @typedef {Object} Configuration
         @memberOf TreeBIOS
         @property {Boolean} [enableCheckboxes=true] Use checkboxes in tree nodes
         @property {Number} [delayPrimaryNodeAction=500] How long to delay for _leading_ **enter key** and **click** events on a tree node’s primary action
         @property {Number} [delayResize=100] How long to delay on _trailing_ resize event for auto collapse logic
         @property {Boolean} [rootNodesLoading=true] Indicates whether root nodes are loading
         @property {Boolean} [autoMarkRootNodesLoaded=true] On `model.loaded` event, mark as loaded and focus the first node
         @property {Number} [autoCollapseThreshold=600] When the viewport is less than this many pixels, the tree is collapsed and hidden. To reveal it, the user activates a button.
         @property {Boolean} [truncateNodeText=true] Should the node text and title be truncated?
         @property {Number} [truncateNodeTextLength=60] Truncate the node text to this length
         @property {Number} [truncateNodeTitleLength=150] Truncate the node title to this length
         @property {Boolean} [jsonTree=false] Is this a JSON tree?
         */
        const defaults = {
            enableCheckboxes: true,
            delayPrimaryNodeAction: 500,
            delayResize: 100,
            rootNodesLoading: true,
            autoMarkRootNodesLoaded: true,
            autoCollapseThreshold: 600, //px
            truncateNodeText: true,
            truncateNodeTextLength: 60,
            truncateNodeTitleLength: 150,
            jsonTree: false
        };

        super(opts);

        _.merge(this, defaults, opts);

        if (this.autoMarkRootNodesLoaded) {
            this.rootNodesLoading = true;
            this.on('model.loaded', this.markRootNodesLoaded);
        }

        this.on('node.deselected', this.markContentLoaded);
    }

    /**
     * Signify root node loading is complete
     * @method markRootNodesLoaded
     * @memberOf TreeBIOS
     * @instance
     */
    markRootNodesLoaded() {
        this.rootNodesLoading = false;
        const firstNode = this.get(0);

        if (!_.isUndefined(firstNode)) {
            firstNode.focus();
        }
    }

    /**
     * Mark loading content to false when node is deselected
     * @method markContentLoaded
     * @memberOf TreeBIOS
     * @param {TreeNode} node
     * @instance
     */
    markContentLoaded(node) {
        node.loadingContent = false;
    }

    /**
     * Filter function for if a node’s content is loading
     * @method isLoadingContent
     * @memberOf TreeBIOS
     * @param {TreeNode} node
     * @returns {Boolean}
     */
    static isLoadingContent(node) {
        return node.loadingContent === true;
    }

    /**
     * Deep inspection of all nodes to see if any have content loading
     * @method isAnyNodeLoadingContent
     * @memberOf TreeBIOS
     * @returns {Boolean}
     * @instance
     */
    isAnyNodeLoadingContent() {
        let result = false;

        this.recurseDown(function (node) {
            if (isLoadingContent(node)) {
                result = true;
                return false; //stop looking
            }
        });

        return result;
    }

    static isTreeNodes(nodes) {
        return nodes && !!nodes.calculateRenderablePositions;
    }
    static isTreeNode(node) {
        return node && !!node.nextVisibleAncestralSiblingNode;
    }

}
